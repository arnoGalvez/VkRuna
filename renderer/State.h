// Copyright (c) 2021 Arno Galvez

#pragma once

#include "rnLib/Math.h"

namespace vkRuna
{
enum pipelineState_t : uint64_t
{
	SRCBLEND_FACTOR_ZERO					 = 0ull << 0,
	SRCBLEND_FACTOR_ONE						 = 1ull << 0,
	SRCBLEND_FACTOR_SRC_COLOR				 = 2ull << 0,
	SRCBLEND_FACTOR_ONE_MINUS_SRC_COLOR		 = 3ull << 0,
	SRCBLEND_FACTOR_DST_COLOR				 = 4ull << 0,
	SRCBLEND_FACTOR_ONE_MINUS_DST_COLOR		 = 5ull << 0,
	SRCBLEND_FACTOR_SRC_ALPHA				 = 6ull << 0,
	SRCBLEND_FACTOR_ONE_MINUS_SRC_ALPHA		 = 7ull << 0,
	SRCBLEND_FACTOR_DST_ALPHA				 = 8ull << 0,
	SRCBLEND_FACTOR_ONE_MINUS_DST_ALPHA		 = 9ull << 0,
	SRCBLEND_FACTOR_CONSTANT_COLOR			 = 10ull << 0,
	SRCBLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11ull << 0,
	SRCBLEND_FACTOR_CONSTANT_ALPHA			 = 12ull << 0,
	SRCBLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13ull << 0,
	SRCBLEND_FACTOR_SRC_ALPHA_SATURATE		 = 14ull << 0,
	SRCBLEND_FACTOR_SRC1_COLOR				 = 15ull << 0,
	SRCBLEND_FACTOR_ONE_MINUS_SRC1_COLOR	 = 16ull << 0,
	SRCBLEND_FACTOR_SRC1_ALPHA				 = 17ull << 0,
	SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA	 = 18ull << 0,
	SRCBLEND_FACTOR_MASK					 = enumMask( SRCBLEND_FACTOR_ONE, SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ),

	DSTBLEND_FACTOR_ZERO					 = 0ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_ONE						 = 1ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_SRC_COLOR				 = 2ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_ONE_MINUS_SRC_COLOR		 = 3ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_DST_COLOR				 = 4ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_ONE_MINUS_DST_COLOR		 = 5ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_SRC_ALPHA				 = 6ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_ONE_MINUS_SRC_ALPHA		 = 7ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_DST_ALPHA				 = 8ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_ONE_MINUS_DST_ALPHA		 = 9ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_CONSTANT_COLOR			 = 10ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_CONSTANT_ALPHA			 = 12ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_SRC_ALPHA_SATURATE		 = 14ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_SRC1_COLOR				 = 15ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_ONE_MINUS_SRC1_COLOR	 = 16ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_SRC1_ALPHA				 = 17ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA	 = 18ull << ( bsr( SRCBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	DSTBLEND_FACTOR_MASK					 = enumMask( DSTBLEND_FACTOR_ONE, DSTBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ),

	BLEND_OP_ADD			  = 0ull << ( bsr( DSTBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	BLEND_OP_SUBTRACT		  = 1ull << ( bsr( DSTBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	BLEND_OP_REVERSE_SUBTRACT = 2ull << ( bsr( DSTBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	BLEND_OP_MIN			  = 3ull << ( bsr( DSTBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	BLEND_OP_MAX			  = 4ull << ( bsr( DSTBLEND_FACTOR_ONE_MINUS_SRC1_ALPHA ) + 1 ),
	BLEND_OP_MASK			  = enumMask( BLEND_OP_SUBTRACT, BLEND_OP_MAX ),

	STENCIL_OP_FAIL_KEEP				= 0ull << ( bsr( BLEND_OP_MAX ) + 1 ),
	STENCIL_OP_FAIL_ZERO				= 1ull << ( bsr( BLEND_OP_MAX ) + 1 ),
	STENCIL_OP_FAIL_REPLACE				= 2ull << ( bsr( BLEND_OP_MAX ) + 1 ),
	STENCIL_OP_FAIL_INCREMENT_AND_CLAMP = 3ull << ( bsr( BLEND_OP_MAX ) + 1 ),
	STENCIL_OP_FAIL_DECREMENT_AND_CLAMP = 4ull << ( bsr( BLEND_OP_MAX ) + 1 ),
	STENCIL_OP_FAIL_INVERT				= 5ull << ( bsr( BLEND_OP_MAX ) + 1 ),
	STENCIL_OP_FAIL_INCREMENT_AND_WRAP	= 6ull << ( bsr( BLEND_OP_MAX ) + 1 ),
	STENCIL_OP_FAIL_DECREMENT_AND_WRAP	= 7ull << ( bsr( BLEND_OP_MAX ) + 1 ),
	STENCIL_OP_FAIL_MASK				= enumMask( STENCIL_OP_FAIL_ZERO, STENCIL_OP_FAIL_DECREMENT_AND_WRAP ),

	STENCIL_OP_PASS_KEEP				= 0ull << ( bsr( STENCIL_OP_FAIL_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_OP_PASS_ZERO				= 1ull << ( bsr( STENCIL_OP_FAIL_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_OP_PASS_REPLACE				= 2ull << ( bsr( STENCIL_OP_FAIL_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_OP_PASS_INCREMENT_AND_CLAMP = 3ull << ( bsr( STENCIL_OP_FAIL_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_OP_PASS_DECREMENT_AND_CLAMP = 4ull << ( bsr( STENCIL_OP_FAIL_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_OP_PASS_INVERT				= 5ull << ( bsr( STENCIL_OP_FAIL_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_OP_PASS_INCREMENT_AND_WRAP	= 6ull << ( bsr( STENCIL_OP_FAIL_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_OP_PASS_DECREMENT_AND_WRAP	= 7ull << ( bsr( STENCIL_OP_FAIL_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_OP_PASS_MASK				= enumMask( STENCIL_OP_PASS_ZERO, STENCIL_OP_PASS_DECREMENT_AND_WRAP ),

	STENCIL_OP_ZFAIL_KEEP				 = 0ull << ( bsr( STENCIL_OP_PASS_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_OP_ZFAIL_ZERO				 = 1ull << ( bsr( STENCIL_OP_PASS_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_OP_ZFAIL_REPLACE			 = 2ull << ( bsr( STENCIL_OP_PASS_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_OP_ZFAIL_INCREMENT_AND_CLAMP = 3ull << ( bsr( STENCIL_OP_PASS_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_OP_ZFAIL_DECREMENT_AND_CLAMP = 4ull << ( bsr( STENCIL_OP_PASS_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_OP_ZFAIL_INVERT				 = 5ull << ( bsr( STENCIL_OP_PASS_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_OP_ZFAIL_INCREMENT_AND_WRAP	 = 6ull << ( bsr( STENCIL_OP_PASS_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_OP_ZFAIL_DECREMENT_AND_WRAP	 = 7ull << ( bsr( STENCIL_OP_PASS_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_OP_ZFAIL_MASK				 = enumMask( STENCIL_OP_ZFAIL_ZERO, STENCIL_OP_ZFAIL_DECREMENT_AND_WRAP ),

	STENCIL_COMPARE_OP_NEVER			= 0ull << ( bsr( STENCIL_OP_ZFAIL_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_COMPARE_OP_LESS				= 1ull << ( bsr( STENCIL_OP_ZFAIL_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_COMPARE_OP_EQUAL			= 2ull << ( bsr( STENCIL_OP_ZFAIL_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_COMPARE_OP_LESS_OR_EQUAL	= 3ull << ( bsr( STENCIL_OP_ZFAIL_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_COMPARE_OP_GREATER			= 4ull << ( bsr( STENCIL_OP_ZFAIL_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_COMPARE_OP_NOT_EQUAL		= 5ull << ( bsr( STENCIL_OP_ZFAIL_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_COMPARE_OP_GREATER_OR_EQUAL = 6ull << ( bsr( STENCIL_OP_ZFAIL_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_COMPARE_OP_ALWAYS			= 7ull << ( bsr( STENCIL_OP_ZFAIL_DECREMENT_AND_WRAP ) + 1 ),
	STENCIL_COMPARE_OP_MASK				= enumMask( STENCIL_COMPARE_OP_LESS, STENCIL_COMPARE_OP_ALWAYS ),

	DEPTH_COMPARE_OP_NEVER			  = 0ull << ( bsr( STENCIL_COMPARE_OP_ALWAYS ) + 1 ),
	DEPTH_COMPARE_OP_LESS			  = 1ull << ( bsr( STENCIL_COMPARE_OP_ALWAYS ) + 1 ),
	DEPTH_COMPARE_OP_EQUAL			  = 2ull << ( bsr( STENCIL_COMPARE_OP_ALWAYS ) + 1 ),
	DEPTH_COMPARE_OP_LESS_OR_EQUAL	  = 3ull << ( bsr( STENCIL_COMPARE_OP_ALWAYS ) + 1 ),
	DEPTH_COMPARE_OP_GREATER		  = 4ull << ( bsr( STENCIL_COMPARE_OP_ALWAYS ) + 1 ),
	DEPTH_COMPARE_OP_NOT_EQUAL		  = 5ull << ( bsr( STENCIL_COMPARE_OP_ALWAYS ) + 1 ),
	DEPTH_COMPARE_OP_GREATER_OR_EQUAL = 6ull << ( bsr( STENCIL_COMPARE_OP_ALWAYS ) + 1 ),
	DEPTH_COMPARE_OP_ALWAYS			  = 7ull << ( bsr( STENCIL_COMPARE_OP_ALWAYS ) + 1 ),
	DEPTH_COMPARE_OP_MASK			  = enumMask( DEPTH_COMPARE_OP_LESS, DEPTH_COMPARE_OP_ALWAYS ),

	CULL_MODE_NONE			 = 0ull << ( bsr( DEPTH_COMPARE_OP_ALWAYS ) + 1 ),
	CULL_MODE_FRONT_BIT		 = 1ull << ( bsr( DEPTH_COMPARE_OP_ALWAYS ) + 1 ),
	CULL_MODE_BACK_BIT		 = 2ull << ( bsr( DEPTH_COMPARE_OP_ALWAYS ) + 1 ),
	CULL_MODE_FRONT_AND_BACK = 3ull << ( bsr( DEPTH_COMPARE_OP_ALWAYS ) + 1 ),
	CULL_MODE_MASK			 = enumMask( CULL_MODE_FRONT_BIT, CULL_MODE_FRONT_AND_BACK ),

	POLYGON_MODE_FILL  = 0ull << ( bsr( CULL_MODE_FRONT_AND_BACK ) + 1 ),
	POLYGON_MODE_LINE  = 1ull << ( bsr( CULL_MODE_FRONT_AND_BACK ) + 1 ),
	POLYGON_MODE_POINT = 2ull << ( bsr( CULL_MODE_FRONT_AND_BACK ) + 1 ),
	POLYGON_MODE_MASK  = enumMask( POLYGON_MODE_LINE, POLYGON_MODE_POINT ),

	COLOR_MASK_R_BIT	= 0x00000001ull << ( bsr( POLYGON_MODE_POINT ) + 1 ),
	COLOR_MASK_G_BIT	= 0x00000002ull << ( bsr( POLYGON_MODE_POINT ) + 1 ),
	COLOR_MASK_B_BIT	= 0x00000004ull << ( bsr( POLYGON_MODE_POINT ) + 1 ),
	COLOR_MASK_A_BIT	= 0x00000008ull << ( bsr( POLYGON_MODE_POINT ) + 1 ),
	COLOR_MASK_ALL_BITS = ( COLOR_MASK_R_BIT | COLOR_MASK_G_BIT | COLOR_MASK_B_BIT ), // Note: alpha not included
	COLOR_MASK_MASK		= ( COLOR_MASK_ALL_BITS | COLOR_MASK_A_BIT ),

	PRIMITIVE_TOPOLOGY_POINT_LIST					 = 0ull << ( bsr( COLOR_MASK_A_BIT ) + 1 ),
	PRIMITIVE_TOPOLOGY_LINE_LIST					 = 1ull << ( bsr( COLOR_MASK_A_BIT ) + 1 ),
	PRIMITIVE_TOPOLOGY_LINE_STRIP					 = 2ull << ( bsr( COLOR_MASK_A_BIT ) + 1 ),
	PRIMITIVE_TOPOLOGY_TRIANGLE_LIST				 = 3ull << ( bsr( COLOR_MASK_A_BIT ) + 1 ),
	PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP				 = 4ull << ( bsr( COLOR_MASK_A_BIT ) + 1 ),
	PRIMITIVE_TOPOLOGY_TRIANGLE_FAN					 = 5ull << ( bsr( COLOR_MASK_A_BIT ) + 1 ),
	PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY		 = 6ull << ( bsr( COLOR_MASK_A_BIT ) + 1 ),
	PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY	 = 7ull << ( bsr( COLOR_MASK_A_BIT ) + 1 ),
	PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY	 = 8ull << ( bsr( COLOR_MASK_A_BIT ) + 1 ),
	PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9ull << ( bsr( COLOR_MASK_A_BIT ) + 1 ),
	PRIMITIVE_TOPOLOGY_PATCH_LIST					 = 10ull << ( bsr( COLOR_MASK_A_BIT ) + 1 ),
	PRIMITIVE_TOPOLOGY_MASK = enumMask( PRIMITIVE_TOPOLOGY_LINE_LIST, PRIMITIVE_TOPOLOGY_PATCH_LIST ),

	DEPTH_TEST_ENABLE = 1ull << ( bsr( PRIMITIVE_TOPOLOGY_PATCH_LIST ) + 1 ),

	DEPTH_WRITE_ENABLE = 1ull << ( bsr( DEPTH_TEST_ENABLE ) + 1 ),

	STENCIL_TEST_ENABLE = 1ull << ( bsr( DEPTH_WRITE_ENABLE ) + 1 ),

	STENCIL_REF_BITS = 0xFFull << ( bsr( STENCIL_TEST_ENABLE ) + 1 ),

	STENCIL_MASK_BITS = 0xFFull << ( bsr( STENCIL_REF_BITS ) + 1 )
};

uint64_t StateSetSrcBlend( uint64_t state, pipelineState_t srcBlend );
uint64_t StateSetDstBlend( uint64_t state, pipelineState_t dstBlend );
uint64_t StateSetBlendOp( uint64_t state, pipelineState_t blendOp );
uint64_t StateSetCullMode( uint64_t state, pipelineState_t cullMode );
uint64_t StateSetPolygonMode( uint64_t state, pipelineState_t polygonMode );
uint64_t StateSetPrimitiveTopology( uint64_t state, pipelineState_t primitiveTopology );
uint64_t StateSetDepthTest( uint64_t state, bool enabled );
uint64_t StateSetDepthWrite( uint64_t state, bool enabled );
uint64_t StateSetDepthOp( uint64_t state, pipelineState_t depthOp );

} // namespace vkRuna
